package hu.bme.mit.trainbenchmark.benchmark.emfincquery

import "http://www.semanticweb.org/ontologies/2011/1/TrainRequirementOntology.owl" 

pattern SignalNeighbor(route1)
{
	find exitSignalSensor(signal, route1, sensor1);
	find connectingSensors(sensor1, sensor2);
	find routeDefinition(route3, sensor2);
	route3 != route1;
	neg find entrySignalSensor(signal, _route2, sensor2);
}

pattern exitSignalSensor(signal, route1, sensor1)
{
	find exitSignal(route1, signal);
	find routeDefinition(route1, sensor1);
}
	
pattern entrySignalSensor(signal, route2, sensor2)
{
	find entrySignal(route2, signal);
	find routeDefinition(route2, sensor2);
}
	
pattern entrySignal(route, signal)
{
	Route(route);
	Signal(signal);
	Route.Route_entry(route, signal);
}

pattern exitSignal(route, signal)
{
	Route(route);
	Signal(signal);
	Route.Route_exit(route, signal);
}
	
pattern routeDefinition(route, sensor)
{
	Route(route);
	Sensor(sensor);
	Route.Route_routeDefinition(route, sensor);
}
	
pattern connectingSensors(sensor1, sensor2)
{
	find sensorTrackElement(sensor1, te1);
	find sensorTrackElement(sensor2, te2);
	find trackElementConnected(te1, te2);
}
	
pattern trackElementConnected(te1, te2)
{
	TrackElement(te1);
	TrackElement(te2);
	TrackElement.TrackElement_connectsTo(te1, te2);
}
	
	
pattern sensorTrackElement(sen, te)
{
	Sensor(sen);
	TrackElement(te);
	Sensor.Sensor_trackElement(sen, te);
}

/*
pattern SignalNeighbor(route1)
{
	Route.Route_exit(route1, signal);
	Route.Route_routeDefinition(route1, sensor1);
	
	Sensor.Sensor_trackElement(sensor1, te1);
	Sensor.Sensor_trackElement(sensor2, te2);
	TrackElement.TrackElement_connectsTo(te1, te2);
	
	Route.Route_routeDefinition(route3, sensor2);
	
	route3 != route1;
		
	neg find Iq4entrySignalSensor(signal, _route2, sensor2);
}
	
	
pattern Iq4entrySignalSensor(signal, route2, sensor2)
{
	Route.Route_entry(route2, signal);
	Route.Route_routeDefinition(route2, sensor2);
}

pattern Iq4exitSignalSensor(signal, route1, sensor1)
{
	Route.Route_exit(route1, signal);
	Route.Route_routeDefinition(route1, sensor1);
}
*/
